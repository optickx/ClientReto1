@startuml client
/'Graphic properties
'/

skinparam linetype ortho
skinparam groupInheritance 5
hide empty members

/'Main class
'/
class Application {
    -LoginWindow lw
    +void main()
}

/'Every window of the program.
Three of them.'/
class LoginController {
    -String userName
    __
    +void login()
    __
    The first window the user 
    sees when opening the program.
}
class RegisterController {
    -String credentials
    __
    +void register()
    __
    Window to enter the data for 
    a new user.

}
class GreetController {
    -String greet
    __
    GreetWindow (String greet)
}
/'Logic part of the program.
'/
interface IUserManager {
    +Message login()
    +Message signIn()
}
class IUMImplementation {
    +void login()
    +void signIn()
    -List getUusers()
    __
    DAO. Returns the User objects.
}
class UserManagerFactory {
    +IUserManager getUsers()
}

/'Pre-existing Java classes'/
class Socket {
    InputStream read()
    OutputStream write()
    __
    All this stuff already exists.
}
/'Objects, etc
'/
class User {
    -Integer ID
    -String login
    -String email
    -String fullName
    -String password
    -Timestamp lastPasswordChange
    -UserStatus status
    -UserPrivilege privilege
    -Collection lastLogins
    __
    +void whatever()
    __
    Object that moves the data.
}
class SignIn {
    -Timestamp lastSignIn
}
/' Message classes
'/

class Request {
    -User user
    -RequestType requestType
    __
    Stores the action to 
    be done by the server.
}

enum RequestType {
   SIGNUP 
   SIGNIN 
}

class Response {
    -User user
    -ResponseType responseType
    __
    Stores the state of the answer,
    if it went right or wrong.
}
enum ResponseType {
    OK
    LOGIN_CREDENTIAL_ERROR
    SERVER_ERROR
    USERNAME_ERROR
    EMAIL_ERROR
}


/'Exceptions.
'/
class UnmatchedPasswordsException {
    +String reason
    __
    The passwords are not the same.
}


class EmailErrorException {
    -String email
    -TYPE reason
    __
    Thrown when the 
    email is not valid.
}
enum EmailErrorExceptionTYPE {
    INVALID_PATTERN
    ALREADY_IN_USE
}

class UsernameErrorException {
    -String userName
    -TYPE reason
}
enum UsernameErrorExceptionTYPE {
    USER_NOT_FOUND
    USERNAME_AVAILABLE
}


Application -- LoginController

LoginController -right- GreetController
LoginController -left- RegisterController

LoginController -down-> UserManagerFactory
RegisterController --> UserManagerFactory

LoginController --> IUserManager
RegisterController --> IUserManager

/' It looks horrible but ya have to indicate it:
User appears in every class from view.
'/

/'
LoginController --> User
RegisterController --> User
GreetController -down-> User
'/

UserManagerFactory -- IUserManager
IUserManager <|.. IUMImplementation
IUMImplementation -right-> User
IUMImplementation -left-> Socket
User -up-> SignIn


IUMImplementation --> Request 
IUMImplementation -left-> Response

User <-down- Request 
RequestType -up-Request 

User -down- Response
ResponseType -up- Response


EmailErrorException -right- RegisterController
UnmatchedPasswordsException -- RegisterController
UsernameErrorException -- RegisterController
UsernameErrorException -- LoginController

EmailErrorException -- EmailErrorExceptionTYPE
UsernameErrorException -up- UsernameErrorExceptionTYPE
@enduml